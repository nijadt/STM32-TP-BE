
Proj_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d50  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001eb0  08001eb0  00011eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001eb8  08001eb8  00011eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001ebc  08001ebc  00011ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000060  2000000c  08001ecc  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000006c  08001ecc  0002006c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007114  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001305  00000000  00000000  00027149  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000828  00000000  00000000  00028450  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000770  00000000  00000000  00028c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000395f  00000000  00000000  000293e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000027be  00000000  00000000  0002cd47  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002f505  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000020e0  00000000  00000000  0002f584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001e74 	.word	0x08001e74

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001e74 	.word	0x08001e74

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b97a 	b.w	8000488 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	460e      	mov	r6, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	9d08      	ldr	r5, [sp, #32]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d150      	bne.n	800025e <__udivmoddi4+0xb2>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d96c      	bls.n	800029c <__udivmoddi4+0xf0>
 80001c2:	fab2 fe82 	clz	lr, r2
 80001c6:	f1be 0f00 	cmp.w	lr, #0
 80001ca:	d00b      	beq.n	80001e4 <__udivmoddi4+0x38>
 80001cc:	f1ce 0c20 	rsb	ip, lr, #32
 80001d0:	fa01 f60e 	lsl.w	r6, r1, lr
 80001d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80001d8:	fa02 f70e 	lsl.w	r7, r2, lr
 80001dc:	ea4c 0c06 	orr.w	ip, ip, r6
 80001e0:	fa00 f40e 	lsl.w	r4, r0, lr
 80001e4:	0c3a      	lsrs	r2, r7, #16
 80001e6:	fbbc f9f2 	udiv	r9, ip, r2
 80001ea:	b2bb      	uxth	r3, r7
 80001ec:	fb02 cc19 	mls	ip, r2, r9, ip
 80001f0:	fb09 fa03 	mul.w	sl, r9, r3
 80001f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80001f8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80001fc:	45b2      	cmp	sl, r6
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x6a>
 8000200:	19f6      	adds	r6, r6, r7
 8000202:	f109 31ff 	add.w	r1, r9, #4294967295
 8000206:	f080 8125 	bcs.w	8000454 <__udivmoddi4+0x2a8>
 800020a:	45b2      	cmp	sl, r6
 800020c:	f240 8122 	bls.w	8000454 <__udivmoddi4+0x2a8>
 8000210:	f1a9 0902 	sub.w	r9, r9, #2
 8000214:	443e      	add	r6, r7
 8000216:	eba6 060a 	sub.w	r6, r6, sl
 800021a:	fbb6 f0f2 	udiv	r0, r6, r2
 800021e:	fb02 6610 	mls	r6, r2, r0, r6
 8000222:	fb00 f303 	mul.w	r3, r0, r3
 8000226:	b2a4      	uxth	r4, r4
 8000228:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800022c:	42a3      	cmp	r3, r4
 800022e:	d909      	bls.n	8000244 <__udivmoddi4+0x98>
 8000230:	19e4      	adds	r4, r4, r7
 8000232:	f100 32ff 	add.w	r2, r0, #4294967295
 8000236:	f080 810b 	bcs.w	8000450 <__udivmoddi4+0x2a4>
 800023a:	42a3      	cmp	r3, r4
 800023c:	f240 8108 	bls.w	8000450 <__udivmoddi4+0x2a4>
 8000240:	3802      	subs	r0, #2
 8000242:	443c      	add	r4, r7
 8000244:	2100      	movs	r1, #0
 8000246:	1ae4      	subs	r4, r4, r3
 8000248:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800024c:	2d00      	cmp	r5, #0
 800024e:	d062      	beq.n	8000316 <__udivmoddi4+0x16a>
 8000250:	2300      	movs	r3, #0
 8000252:	fa24 f40e 	lsr.w	r4, r4, lr
 8000256:	602c      	str	r4, [r5, #0]
 8000258:	606b      	str	r3, [r5, #4]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d907      	bls.n	8000272 <__udivmoddi4+0xc6>
 8000262:	2d00      	cmp	r5, #0
 8000264:	d055      	beq.n	8000312 <__udivmoddi4+0x166>
 8000266:	2100      	movs	r1, #0
 8000268:	e885 0041 	stmia.w	r5, {r0, r6}
 800026c:	4608      	mov	r0, r1
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	f040 808f 	bne.w	800039a <__udivmoddi4+0x1ee>
 800027c:	42b3      	cmp	r3, r6
 800027e:	d302      	bcc.n	8000286 <__udivmoddi4+0xda>
 8000280:	4282      	cmp	r2, r0
 8000282:	f200 80fc 	bhi.w	800047e <__udivmoddi4+0x2d2>
 8000286:	1a84      	subs	r4, r0, r2
 8000288:	eb66 0603 	sbc.w	r6, r6, r3
 800028c:	2001      	movs	r0, #1
 800028e:	46b4      	mov	ip, r6
 8000290:	2d00      	cmp	r5, #0
 8000292:	d040      	beq.n	8000316 <__udivmoddi4+0x16a>
 8000294:	e885 1010 	stmia.w	r5, {r4, ip}
 8000298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029c:	b912      	cbnz	r2, 80002a4 <__udivmoddi4+0xf8>
 800029e:	2701      	movs	r7, #1
 80002a0:	fbb7 f7f2 	udiv	r7, r7, r2
 80002a4:	fab7 fe87 	clz	lr, r7
 80002a8:	f1be 0f00 	cmp.w	lr, #0
 80002ac:	d135      	bne.n	800031a <__udivmoddi4+0x16e>
 80002ae:	2101      	movs	r1, #1
 80002b0:	1bf6      	subs	r6, r6, r7
 80002b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002b6:	fa1f f887 	uxth.w	r8, r7
 80002ba:	fbb6 f2fc 	udiv	r2, r6, ip
 80002be:	fb0c 6612 	mls	r6, ip, r2, r6
 80002c2:	fb08 f002 	mul.w	r0, r8, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80002cc:	42b0      	cmp	r0, r6
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0x134>
 80002d0:	19f6      	adds	r6, r6, r7
 80002d2:	f102 33ff 	add.w	r3, r2, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x132>
 80002d8:	42b0      	cmp	r0, r6
 80002da:	f200 80d2 	bhi.w	8000482 <__udivmoddi4+0x2d6>
 80002de:	461a      	mov	r2, r3
 80002e0:	1a36      	subs	r6, r6, r0
 80002e2:	fbb6 f0fc 	udiv	r0, r6, ip
 80002e6:	fb0c 6610 	mls	r6, ip, r0, r6
 80002ea:	fb08 f800 	mul.w	r8, r8, r0
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x15c>
 80002f8:	19e4      	adds	r4, r4, r7
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x15a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80b9 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000310:	e79c      	b.n	800024c <__udivmoddi4+0xa0>
 8000312:	4629      	mov	r1, r5
 8000314:	4628      	mov	r0, r5
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fa07 f70e 	lsl.w	r7, r7, lr
 800031e:	f1ce 0320 	rsb	r3, lr, #32
 8000322:	fa26 f203 	lsr.w	r2, r6, r3
 8000326:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800032a:	fbb2 f1fc 	udiv	r1, r2, ip
 800032e:	fa1f f887 	uxth.w	r8, r7
 8000332:	fb0c 2211 	mls	r2, ip, r1, r2
 8000336:	fa06 f60e 	lsl.w	r6, r6, lr
 800033a:	fa20 f303 	lsr.w	r3, r0, r3
 800033e:	fb01 f908 	mul.w	r9, r1, r8
 8000342:	4333      	orrs	r3, r6
 8000344:	0c1e      	lsrs	r6, r3, #16
 8000346:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800034a:	45b1      	cmp	r9, r6
 800034c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x1ba>
 8000352:	19f6      	adds	r6, r6, r7
 8000354:	f101 32ff 	add.w	r2, r1, #4294967295
 8000358:	f080 808c 	bcs.w	8000474 <__udivmoddi4+0x2c8>
 800035c:	45b1      	cmp	r9, r6
 800035e:	f240 8089 	bls.w	8000474 <__udivmoddi4+0x2c8>
 8000362:	3902      	subs	r1, #2
 8000364:	443e      	add	r6, r7
 8000366:	eba6 0609 	sub.w	r6, r6, r9
 800036a:	fbb6 f0fc 	udiv	r0, r6, ip
 800036e:	fb0c 6210 	mls	r2, ip, r0, r6
 8000372:	fb00 f908 	mul.w	r9, r0, r8
 8000376:	b29e      	uxth	r6, r3
 8000378:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800037c:	45b1      	cmp	r9, r6
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x1e4>
 8000380:	19f6      	adds	r6, r6, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d271      	bcs.n	800046c <__udivmoddi4+0x2c0>
 8000388:	45b1      	cmp	r9, r6
 800038a:	d96f      	bls.n	800046c <__udivmoddi4+0x2c0>
 800038c:	3802      	subs	r0, #2
 800038e:	443e      	add	r6, r7
 8000390:	eba6 0609 	sub.w	r6, r6, r9
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	e78f      	b.n	80002ba <__udivmoddi4+0x10e>
 800039a:	f1c1 0720 	rsb	r7, r1, #32
 800039e:	fa22 f807 	lsr.w	r8, r2, r7
 80003a2:	408b      	lsls	r3, r1
 80003a4:	ea48 0303 	orr.w	r3, r8, r3
 80003a8:	fa26 f407 	lsr.w	r4, r6, r7
 80003ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80003b0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003b4:	fa1f fc83 	uxth.w	ip, r3
 80003b8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003bc:	408e      	lsls	r6, r1
 80003be:	fa20 f807 	lsr.w	r8, r0, r7
 80003c2:	fb09 fa0c 	mul.w	sl, r9, ip
 80003c6:	ea48 0806 	orr.w	r8, r8, r6
 80003ca:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80003ce:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	fa02 f201 	lsl.w	r2, r2, r1
 80003d8:	fa00 f601 	lsl.w	r6, r0, r1
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x244>
 80003de:	18e4      	adds	r4, r4, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	d244      	bcs.n	8000470 <__udivmoddi4+0x2c4>
 80003e6:	45a2      	cmp	sl, r4
 80003e8:	d942      	bls.n	8000470 <__udivmoddi4+0x2c4>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	441c      	add	r4, r3
 80003f0:	eba4 040a 	sub.w	r4, r4, sl
 80003f4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003f8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003fc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000400:	fa1f f888 	uxth.w	r8, r8
 8000404:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x270>
 800040c:	18e4      	adds	r4, r4, r3
 800040e:	f100 3eff 	add.w	lr, r0, #4294967295
 8000412:	d229      	bcs.n	8000468 <__udivmoddi4+0x2bc>
 8000414:	45a4      	cmp	ip, r4
 8000416:	d927      	bls.n	8000468 <__udivmoddi4+0x2bc>
 8000418:	3802      	subs	r0, #2
 800041a:	441c      	add	r4, r3
 800041c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000420:	fba0 8902 	umull	r8, r9, r0, r2
 8000424:	eba4 0c0c 	sub.w	ip, r4, ip
 8000428:	45cc      	cmp	ip, r9
 800042a:	46c2      	mov	sl, r8
 800042c:	46ce      	mov	lr, r9
 800042e:	d315      	bcc.n	800045c <__udivmoddi4+0x2b0>
 8000430:	d012      	beq.n	8000458 <__udivmoddi4+0x2ac>
 8000432:	b155      	cbz	r5, 800044a <__udivmoddi4+0x29e>
 8000434:	ebb6 030a 	subs.w	r3, r6, sl
 8000438:	eb6c 060e 	sbc.w	r6, ip, lr
 800043c:	fa06 f707 	lsl.w	r7, r6, r7
 8000440:	40cb      	lsrs	r3, r1
 8000442:	431f      	orrs	r7, r3
 8000444:	40ce      	lsrs	r6, r1
 8000446:	602f      	str	r7, [r5, #0]
 8000448:	606e      	str	r6, [r5, #4]
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	4610      	mov	r0, r2
 8000452:	e6f7      	b.n	8000244 <__udivmoddi4+0x98>
 8000454:	4689      	mov	r9, r1
 8000456:	e6de      	b.n	8000216 <__udivmoddi4+0x6a>
 8000458:	4546      	cmp	r6, r8
 800045a:	d2ea      	bcs.n	8000432 <__udivmoddi4+0x286>
 800045c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000460:	eb69 0e03 	sbc.w	lr, r9, r3
 8000464:	3801      	subs	r0, #1
 8000466:	e7e4      	b.n	8000432 <__udivmoddi4+0x286>
 8000468:	4670      	mov	r0, lr
 800046a:	e7d7      	b.n	800041c <__udivmoddi4+0x270>
 800046c:	4618      	mov	r0, r3
 800046e:	e78f      	b.n	8000390 <__udivmoddi4+0x1e4>
 8000470:	4681      	mov	r9, r0
 8000472:	e7bd      	b.n	80003f0 <__udivmoddi4+0x244>
 8000474:	4611      	mov	r1, r2
 8000476:	e776      	b.n	8000366 <__udivmoddi4+0x1ba>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	e744      	b.n	8000308 <__udivmoddi4+0x15c>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0xe4>
 8000482:	3a02      	subs	r2, #2
 8000484:	443e      	add	r6, r7
 8000486:	e72b      	b.n	80002e0 <__udivmoddi4+0x134>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 030c 	add.w	r3, r7, #12
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	4a2d      	ldr	r2, [pc, #180]	; (8000558 <MX_GPIO_Init+0xcc>)
 80004a4:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <MX_GPIO_Init+0xcc>)
 80004a6:	69db      	ldr	r3, [r3, #28]
 80004a8:	f043 0304 	orr.w	r3, r3, #4
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <MX_GPIO_Init+0xcc>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 0304 	and.w	r3, r3, #4
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4a27      	ldr	r2, [pc, #156]	; (8000558 <MX_GPIO_Init+0xcc>)
 80004bc:	4b26      	ldr	r3, [pc, #152]	; (8000558 <MX_GPIO_Init+0xcc>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b24      	ldr	r3, [pc, #144]	; (8000558 <MX_GPIO_Init+0xcc>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2120      	movs	r1, #32
 80004d6:	4821      	ldr	r0, [pc, #132]	; (800055c <MX_GPIO_Init+0xd0>)
 80004d8:	f000 fc4a 	bl	8000d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4619      	mov	r1, r3
 80004f2:	481b      	ldr	r0, [pc, #108]	; (8000560 <MX_GPIO_Init+0xd4>)
 80004f4:	f000 faae 	bl	8000a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004f8:	2320      	movs	r3, #32
 80004fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	4619      	mov	r1, r3
 800050e:	4813      	ldr	r0, [pc, #76]	; (800055c <MX_GPIO_Init+0xd0>)
 8000510:	f000 faa0 	bl	8000a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000514:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800051a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	4619      	mov	r1, r3
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <MX_GPIO_Init+0xd0>)
 800052c:	f000 fa92 	bl	8000a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	2017      	movs	r0, #23
 8000536:	f000 fa62 	bl	80009fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800053a:	2017      	movs	r0, #23
 800053c:	f000 fa7b 	bl	8000a36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	2100      	movs	r1, #0
 8000544:	2028      	movs	r0, #40	; 0x28
 8000546:	f000 fa5a 	bl	80009fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800054a:	2028      	movs	r0, #40	; 0x28
 800054c:	f000 fa73 	bl	8000a36 <HAL_NVIC_EnableIRQ>

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40023800 	.word	0x40023800
 800055c:	40020000 	.word	0x40020000
 8000560:	40020800 	.word	0x40020800

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 f962 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f804 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f7ff ff8c 	bl	800048c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x10>
	...

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b092      	sub	sp, #72	; 0x48
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fc6c 	bl	8001e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <SystemClock_Config+0x98>)
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <SystemClock_Config+0x98>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a8:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005aa:	2302      	movs	r3, #2
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2310      	movs	r3, #16
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ba:	2300      	movs	r3, #0
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80005c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fc18 	bl	8000e04 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005da:	f000 f853 	bl	8000684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2101      	movs	r1, #1
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 ff34 	bl	8001464 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000602:	f000 f83f 	bl	8000684 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3748      	adds	r7, #72	; 0x48
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40007000 	.word	0x40007000

08000614 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000624:	d010      	beq.n	8000648 <HAL_GPIO_EXTI_Callback+0x34>
 8000626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062a:	d003      	beq.n	8000634 <HAL_GPIO_EXTI_Callback+0x20>
 800062c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000630:	d005      	beq.n	800063e <HAL_GPIO_EXTI_Callback+0x2a>
			break;
		case GPIO_PIN_9:
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Green LED - GPIOA, GPIO_PIN_5
			break;
		}
}
 8000632:	e00e      	b.n	8000652 <HAL_GPIO_EXTI_Callback+0x3e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Green LED - GPIOA, GPIO_PIN_5
 8000634:	2120      	movs	r1, #32
 8000636:	4809      	ldr	r0, [pc, #36]	; (800065c <HAL_GPIO_EXTI_Callback+0x48>)
 8000638:	f000 fbb2 	bl	8000da0 <HAL_GPIO_TogglePin>
			break;
 800063c:	e009      	b.n	8000652 <HAL_GPIO_EXTI_Callback+0x3e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Green LED - GPIOA, GPIO_PIN_5
 800063e:	2120      	movs	r1, #32
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <HAL_GPIO_EXTI_Callback+0x48>)
 8000642:	f000 fbad 	bl	8000da0 <HAL_GPIO_TogglePin>
			break;
 8000646:	e004      	b.n	8000652 <HAL_GPIO_EXTI_Callback+0x3e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Green LED - GPIOA, GPIO_PIN_5
 8000648:	2120      	movs	r1, #32
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <HAL_GPIO_EXTI_Callback+0x48>)
 800064c:	f000 fba8 	bl	8000da0 <HAL_GPIO_TogglePin>
			break;
 8000650:	bf00      	nop
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020000 	.word	0x40020000

08000660 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d101      	bne.n	8000676 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000672:	f000 f8f5 	bl	8000860 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40011000 	.word	0x40011000

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068a:	e7fe      	b.n	800068a <Error_Handler+0x6>

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <HAL_MspInit+0x5c>)
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_MspInit+0x5c>)
 8000696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800069c:	6253      	str	r3, [r2, #36]	; 0x24
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_MspInit+0x5c>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <HAL_MspInit+0x5c>)
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_MspInit+0x5c>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6213      	str	r3, [r2, #32]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_MspInit+0x5c>)
 80006b8:	6a1b      	ldr	r3, [r3, #32]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <HAL_MspInit+0x5c>)
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_MspInit+0x5c>)
 80006c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6253      	str	r3, [r2, #36]	; 0x24
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_MspInit+0x5c>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006da:	2007      	movs	r0, #7
 80006dc:	f000 f984 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800

080006ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM11_IRQn, TickPriority ,0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	201b      	movs	r0, #27
 8000702:	f000 f97c 	bl	80009fe <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8000706:	201b      	movs	r0, #27
 8000708:	f000 f995 	bl	8000a36 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800070c:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <HAL_InitTick+0x9c>)
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <HAL_InitTick+0x9c>)
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6213      	str	r3, [r2, #32]
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <HAL_InitTick+0x9c>)
 800071a:	6a1b      	ldr	r3, [r3, #32]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000724:	f107 0210 	add.w	r2, r7, #16
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f8b4 	bl	800189c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000734:	f001 f89e 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 8000738:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <HAL_InitTick+0xa0>)
 800073e:	fba2 2303 	umull	r2, r3, r2, r3
 8000742:	0c9b      	lsrs	r3, r3, #18
 8000744:	3b01      	subs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_InitTick+0xa4>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <HAL_InitTick+0xa8>)
 800074c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <HAL_InitTick+0xa4>)
 8000750:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000754:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <HAL_InitTick+0xa4>)
 8000758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_InitTick+0xa4>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_InitTick+0xa4>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <HAL_InitTick+0xa4>)
 800076a:	f001 f927 	bl	80019bc <HAL_TIM_Base_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d104      	bne.n	800077e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <HAL_InitTick+0xa4>)
 8000776:	f001 f969 	bl	8001a4c <HAL_TIM_Base_Start_IT>
 800077a:	4603      	mov	r3, r0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3730      	adds	r7, #48	; 0x30
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	431bde83 	.word	0x431bde83
 8000790:	20000028 	.word	0x20000028
 8000794:	40011000 	.word	0x40011000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80007ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007ee:	f000 faf1 	bl	8000dd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80007f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f6:	f000 faed 	bl	8000dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <TIM11_IRQHandler>:

/**
  * @brief This function handles TIM11 global interrupt.
  */
void TIM11_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <TIM11_IRQHandler+0x10>)
 8000806:	f001 f973 	bl	8001af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM11_IRQn 1 */

  /* USER CODE END TIM11_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000028 	.word	0x20000028

08000814 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000818:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800081c:	f000 fada 	bl	8000dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083a:	2003      	movs	r0, #3
 800083c:	f000 f8d4 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff ff53 	bl	80006ec <HAL_InitTick>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d002      	beq.n	8000852 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	e001      	b.n	8000856 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000852:	f7ff ff1b 	bl	800068c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000856:	79fb      	ldrb	r3, [r7, #7]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_IncTick+0x1c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x20>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4413      	add	r3, r2
 800086e:	4a03      	ldr	r2, [pc, #12]	; (800087c <HAL_IncTick+0x1c>)
 8000870:	6013      	str	r3, [r2, #0]
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000068 	.word	0x20000068
 8000880:	20000008 	.word	0x20000008

08000884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <HAL_GetTick+0x10>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000068 	.word	0x20000068

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_EnableIRQ+0x34>)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	095b      	lsrs	r3, r3, #5
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	f002 021f 	and.w	r2, r2, #31
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	490d      	ldr	r1, [pc, #52]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	4909      	ldr	r1, [pc, #36]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	2201      	movs	r2, #1
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	401a      	ands	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ce:	2101      	movs	r1, #1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	1e59      	subs	r1, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff51 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a10:	f7ff ff66 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	6978      	ldr	r0, [r7, #20]
 8000a1c:	f7ff ffb4 	bl	8000988 <NVIC_EncodePriority>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff83 	bl	8000934 <__NVIC_SetPriority>
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff59 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a6a:	e160      	b.n	8000d2e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f000 8152 	beq.w	8000d28 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d005      	beq.n	8000a9c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d130      	bne.n	8000afe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	091b      	lsrs	r3, r3, #4
 8000ae8:	f003 0201 	and.w	r2, r3, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d017      	beq.n	8000b3a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d123      	bne.n	8000b8e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	08da      	lsrs	r2, r3, #3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3208      	adds	r2, #8
 8000b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	08da      	lsrs	r2, r3, #3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3208      	adds	r2, #8
 8000b88:	6939      	ldr	r1, [r7, #16]
 8000b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0203 	and.w	r2, r3, #3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 80ac 	beq.w	8000d28 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	4a5d      	ldr	r2, [pc, #372]	; (8000d48 <HAL_GPIO_Init+0x2f4>)
 8000bd2:	4b5d      	ldr	r3, [pc, #372]	; (8000d48 <HAL_GPIO_Init+0x2f4>)
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6213      	str	r3, [r2, #32]
 8000bdc:	4b5a      	ldr	r3, [pc, #360]	; (8000d48 <HAL_GPIO_Init+0x2f4>)
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000be8:	4a58      	ldr	r2, [pc, #352]	; (8000d4c <HAL_GPIO_Init+0x2f8>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a50      	ldr	r2, [pc, #320]	; (8000d50 <HAL_GPIO_Init+0x2fc>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d025      	beq.n	8000c60 <HAL_GPIO_Init+0x20c>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a4f      	ldr	r2, [pc, #316]	; (8000d54 <HAL_GPIO_Init+0x300>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d01f      	beq.n	8000c5c <HAL_GPIO_Init+0x208>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a4e      	ldr	r2, [pc, #312]	; (8000d58 <HAL_GPIO_Init+0x304>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d019      	beq.n	8000c58 <HAL_GPIO_Init+0x204>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a4d      	ldr	r2, [pc, #308]	; (8000d5c <HAL_GPIO_Init+0x308>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d013      	beq.n	8000c54 <HAL_GPIO_Init+0x200>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a4c      	ldr	r2, [pc, #304]	; (8000d60 <HAL_GPIO_Init+0x30c>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d00d      	beq.n	8000c50 <HAL_GPIO_Init+0x1fc>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a4b      	ldr	r2, [pc, #300]	; (8000d64 <HAL_GPIO_Init+0x310>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d007      	beq.n	8000c4c <HAL_GPIO_Init+0x1f8>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a4a      	ldr	r2, [pc, #296]	; (8000d68 <HAL_GPIO_Init+0x314>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d101      	bne.n	8000c48 <HAL_GPIO_Init+0x1f4>
 8000c44:	2306      	movs	r3, #6
 8000c46:	e00c      	b.n	8000c62 <HAL_GPIO_Init+0x20e>
 8000c48:	2307      	movs	r3, #7
 8000c4a:	e00a      	b.n	8000c62 <HAL_GPIO_Init+0x20e>
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	e008      	b.n	8000c62 <HAL_GPIO_Init+0x20e>
 8000c50:	2304      	movs	r3, #4
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x20e>
 8000c54:	2303      	movs	r3, #3
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x20e>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x20e>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x20e>
 8000c60:	2300      	movs	r3, #0
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c72:	4936      	ldr	r1, [pc, #216]	; (8000d4c <HAL_GPIO_Init+0x2f8>)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <HAL_GPIO_Init+0x318>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ca4:	4a31      	ldr	r2, [pc, #196]	; (8000d6c <HAL_GPIO_Init+0x318>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <HAL_GPIO_Init+0x318>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cce:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <HAL_GPIO_Init+0x318>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <HAL_GPIO_Init+0x318>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <HAL_GPIO_Init+0x318>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_GPIO_Init+0x318>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <HAL_GPIO_Init+0x318>)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f47f ae97 	bne.w	8000a6c <HAL_GPIO_Init+0x18>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40020400 	.word	0x40020400
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	40020c00 	.word	0x40020c00
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40021400 	.word	0x40021400
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d80:	787b      	ldrb	r3, [r7, #1]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000d8c:	e003      	b.n	8000d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	041a      	lsls	r2, r3, #16
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	619a      	str	r2, [r3, #24]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4013      	ands	r3, r2
 8000db8:	041a      	lsls	r2, r3, #16
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43d9      	mvns	r1, r3
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	400b      	ands	r3, r1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
	...

08000dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fc0e 	bl	8000614 <HAL_GPIO_EXTI_Callback>
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40010400 	.word	0x40010400

08000e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e31d      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e16:	4b94      	ldr	r3, [pc, #592]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e20:	4b91      	ldr	r3, [pc, #580]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e28:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d07b      	beq.n	8000f2e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d006      	beq.n	8000e4a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2b0c      	cmp	r3, #12
 8000e40:	d10f      	bne.n	8000e62 <HAL_RCC_OscConfig+0x5e>
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e48:	d10b      	bne.n	8000e62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4a:	4b87      	ldr	r3, [pc, #540]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d06a      	beq.n	8000f2c <HAL_RCC_OscConfig+0x128>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d166      	bne.n	8000f2c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e2f7      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d106      	bne.n	8000e78 <HAL_RCC_OscConfig+0x74>
 8000e6a:	4a7f      	ldr	r2, [pc, #508]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000e6c:	4b7e      	ldr	r3, [pc, #504]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e02d      	b.n	8000ed4 <HAL_RCC_OscConfig+0xd0>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x96>
 8000e80:	4a79      	ldr	r2, [pc, #484]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000e82:	4b79      	ldr	r3, [pc, #484]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4a76      	ldr	r2, [pc, #472]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000e8e:	4b76      	ldr	r3, [pc, #472]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e01c      	b.n	8000ed4 <HAL_RCC_OscConfig+0xd0>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0xb8>
 8000ea2:	4a71      	ldr	r2, [pc, #452]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000ea4:	4b70      	ldr	r3, [pc, #448]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4a6e      	ldr	r2, [pc, #440]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000eb0:	4b6d      	ldr	r3, [pc, #436]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e00b      	b.n	8000ed4 <HAL_RCC_OscConfig+0xd0>
 8000ebc:	4a6a      	ldr	r2, [pc, #424]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000ebe:	4b6a      	ldr	r3, [pc, #424]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4a67      	ldr	r2, [pc, #412]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000eca:	4b67      	ldr	r3, [pc, #412]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d013      	beq.n	8000f04 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fcd2 	bl	8000884 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee4:	f7ff fcce 	bl	8000884 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b64      	cmp	r3, #100	; 0x64
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e2ad      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ef6:	4b5c      	ldr	r3, [pc, #368]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0xe0>
 8000f02:	e014      	b.n	8000f2e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f04:	f7ff fcbe 	bl	8000884 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fcba 	bl	8000884 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b64      	cmp	r3, #100	; 0x64
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e299      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f1e:	4b52      	ldr	r3, [pc, #328]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f0      	bne.n	8000f0c <HAL_RCC_OscConfig+0x108>
 8000f2a:	e000      	b.n	8000f2e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d05a      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d005      	beq.n	8000f4c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	d119      	bne.n	8000f7a <HAL_RCC_OscConfig+0x176>
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d116      	bne.n	8000f7a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f4c:	4b46      	ldr	r3, [pc, #280]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_OscConfig+0x160>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d001      	beq.n	8000f64 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e276      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f64:	4940      	ldr	r1, [pc, #256]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	4313      	orrs	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f78:	e03a      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d020      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_RCC_OscConfig+0x268>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fc7c 	bl	8000884 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f90:	f7ff fc78 	bl	8000884 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e257      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fae:	492e      	ldr	r1, [pc, #184]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	604b      	str	r3, [r1, #4]
 8000fc2:	e015      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_RCC_OscConfig+0x268>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fc5b 	bl	8000884 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fc57 	bl	8000884 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e236      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f0      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80b8 	beq.w	800116e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d170      	bne.n	80010e6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_OscConfig+0x218>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e21a      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1a      	ldr	r2, [r3, #32]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001028:	429a      	cmp	r2, r3
 800102a:	d921      	bls.n	8001070 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fc63 	bl	80018fc <RCC_SetFlashLatencyFromMSIRange>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e208      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001040:	4909      	ldr	r1, [pc, #36]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4313      	orrs	r3, r2
 8001050:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001052:	4905      	ldr	r1, [pc, #20]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <HAL_RCC_OscConfig+0x264>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	061b      	lsls	r3, r3, #24
 8001062:	4313      	orrs	r3, r2
 8001064:	604b      	str	r3, [r1, #4]
 8001066:	e020      	b.n	80010aa <HAL_RCC_OscConfig+0x2a6>
 8001068:	40023800 	.word	0x40023800
 800106c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001070:	49a4      	ldr	r1, [pc, #656]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001072:	4ba4      	ldr	r3, [pc, #656]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001082:	49a0      	ldr	r1, [pc, #640]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001084:	4b9f      	ldr	r3, [pc, #636]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	061b      	lsls	r3, r3, #24
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fc2e 	bl	80018fc <RCC_SetFlashLatencyFromMSIRange>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e1d3      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	0b5b      	lsrs	r3, r3, #13
 80010b0:	3301      	adds	r3, #1
 80010b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010ba:	4a92      	ldr	r2, [pc, #584]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80010bc:	6892      	ldr	r2, [r2, #8]
 80010be:	0912      	lsrs	r2, r2, #4
 80010c0:	f002 020f 	and.w	r2, r2, #15
 80010c4:	4990      	ldr	r1, [pc, #576]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80010c6:	5c8a      	ldrb	r2, [r1, r2]
 80010c8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010ca:	4a90      	ldr	r2, [pc, #576]	; (800130c <HAL_RCC_OscConfig+0x508>)
 80010cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010ce:	4b90      	ldr	r3, [pc, #576]	; (8001310 <HAL_RCC_OscConfig+0x50c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fb0a 	bl	80006ec <HAL_InitTick>
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d045      	beq.n	800116e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	e1b5      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d029      	beq.n	8001142 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010ee:	4b89      	ldr	r3, [pc, #548]	; (8001314 <HAL_RCC_OscConfig+0x510>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fbc6 	bl	8000884 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010fc:	f7ff fbc2 	bl	8000884 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e1a1      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800110e:	4b7d      	ldr	r3, [pc, #500]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800111a:	497a      	ldr	r1, [pc, #488]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 800111c:	4b79      	ldr	r3, [pc, #484]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112c:	4975      	ldr	r1, [pc, #468]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 800112e:	4b75      	ldr	r3, [pc, #468]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	061b      	lsls	r3, r3, #24
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001142:	4b74      	ldr	r3, [pc, #464]	; (8001314 <HAL_RCC_OscConfig+0x510>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fb9c 	bl	8000884 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001150:	f7ff fb98 	bl	8000884 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e177      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001162:	4b68      	ldr	r3, [pc, #416]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d030      	beq.n	80011dc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d016      	beq.n	80011b0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001182:	4b65      	ldr	r3, [pc, #404]	; (8001318 <HAL_RCC_OscConfig+0x514>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001188:	f7ff fb7c 	bl	8000884 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fb78 	bl	8000884 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e157      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011a2:	4b58      	ldr	r3, [pc, #352]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80011a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x38c>
 80011ae:	e015      	b.n	80011dc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b0:	4b59      	ldr	r3, [pc, #356]	; (8001318 <HAL_RCC_OscConfig+0x514>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fb65 	bl	8000884 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011be:	f7ff fb61 	bl	8000884 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e140      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011d0:	4b4c      	ldr	r3, [pc, #304]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80011d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80b5 	beq.w	8001354 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b45      	ldr	r3, [pc, #276]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4a42      	ldr	r2, [pc, #264]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80011fc:	4b41      	ldr	r3, [pc, #260]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6253      	str	r3, [r2, #36]	; 0x24
 8001206:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001212:	2301      	movs	r3, #1
 8001214:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <HAL_RCC_OscConfig+0x518>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	2b00      	cmp	r3, #0
 8001220:	d118      	bne.n	8001254 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001222:	4a3e      	ldr	r2, [pc, #248]	; (800131c <HAL_RCC_OscConfig+0x518>)
 8001224:	4b3d      	ldr	r3, [pc, #244]	; (800131c <HAL_RCC_OscConfig+0x518>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb29 	bl	8000884 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fb25 	bl	8000884 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b64      	cmp	r3, #100	; 0x64
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e104      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <HAL_RCC_OscConfig+0x518>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d106      	bne.n	800126a <HAL_RCC_OscConfig+0x466>
 800125c:	4a29      	ldr	r2, [pc, #164]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001266:	6353      	str	r3, [r2, #52]	; 0x34
 8001268:	e02d      	b.n	80012c6 <HAL_RCC_OscConfig+0x4c2>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x488>
 8001272:	4a24      	ldr	r2, [pc, #144]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800127c:	6353      	str	r3, [r2, #52]	; 0x34
 800127e:	4a21      	ldr	r2, [pc, #132]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001288:	6353      	str	r3, [r2, #52]	; 0x34
 800128a:	e01c      	b.n	80012c6 <HAL_RCC_OscConfig+0x4c2>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d10c      	bne.n	80012ae <HAL_RCC_OscConfig+0x4aa>
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6353      	str	r3, [r2, #52]	; 0x34
 80012a0:	4a18      	ldr	r2, [pc, #96]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80012a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6353      	str	r3, [r2, #52]	; 0x34
 80012ac:	e00b      	b.n	80012c6 <HAL_RCC_OscConfig+0x4c2>
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80012b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b8:	6353      	str	r3, [r2, #52]	; 0x34
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80012be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012c4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d015      	beq.n	80012fa <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fad9 	bl	8000884 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff fad5 	bl	8000884 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0b2      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_OscConfig+0x500>)
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ee      	beq.n	80012d6 <HAL_RCC_OscConfig+0x4d2>
 80012f8:	e023      	b.n	8001342 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fac3 	bl	8000884 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001300:	e019      	b.n	8001336 <HAL_RCC_OscConfig+0x532>
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	08001e98 	.word	0x08001e98
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004
 8001314:	42470020 	.word	0x42470020
 8001318:	42470680 	.word	0x42470680
 800131c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f7ff fab0 	bl	8000884 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f241 3288 	movw	r2, #5000	; 0x1388
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e08d      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_RCC_OscConfig+0x658>)
 8001338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ee      	bne.n	8001320 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d105      	bne.n	8001354 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001348:	4a44      	ldr	r2, [pc, #272]	; (800145c <HAL_RCC_OscConfig+0x658>)
 800134a:	4b44      	ldr	r3, [pc, #272]	; (800145c <HAL_RCC_OscConfig+0x658>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001352:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	2b00      	cmp	r3, #0
 800135a:	d079      	beq.n	8001450 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b0c      	cmp	r3, #12
 8001360:	d056      	beq.n	8001410 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	2b02      	cmp	r3, #2
 8001368:	d13b      	bne.n	80013e2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136a:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_RCC_OscConfig+0x65c>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fa88 	bl	8000884 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001378:	f7ff fa84 	bl	8000884 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e063      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_RCC_OscConfig+0x658>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001396:	4831      	ldr	r0, [pc, #196]	; (800145c <HAL_RCC_OscConfig+0x658>)
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_RCC_OscConfig+0x658>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	4319      	orrs	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	430b      	orrs	r3, r1
 80013b0:	4313      	orrs	r3, r2
 80013b2:	6083      	str	r3, [r0, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_RCC_OscConfig+0x65c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fa63 	bl	8000884 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fa5f 	bl	8000884 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e03e      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_RCC_OscConfig+0x658>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x5be>
 80013e0:	e036      	b.n	8001450 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <HAL_RCC_OscConfig+0x65c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fa4c 	bl	8000884 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fa48 	bl	8000884 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e027      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_RCC_OscConfig+0x658>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x5ec>
 800140e:	e01f      	b.n	8001450 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e01a      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_RCC_OscConfig+0x658>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	429a      	cmp	r2, r3
 800142e:	d10d      	bne.n	800144c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	42470060 	.word	0x42470060

08001464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e11a      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001478:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0201 	and.w	r2, r3, #1
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d219      	bcs.n	80014ba <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_RCC_ClockConfig+0x34>
 800148c:	4a8a      	ldr	r2, [pc, #552]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 800148e:	4b8a      	ldr	r3, [pc, #552]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4987      	ldr	r1, [pc, #540]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 800149a:	4b87      	ldr	r3, [pc, #540]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 0201 	bic.w	r2, r3, #1
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a8:	4b83      	ldr	r3, [pc, #524]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0201 	and.w	r2, r3, #1
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0f9      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c6:	497d      	ldr	r1, [pc, #500]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 80014c8:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 808e 	beq.w	8001602 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ee:	4b73      	ldr	r3, [pc, #460]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d121      	bne.n	800153e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0d7      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001506:	4b6d      	ldr	r3, [pc, #436]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d115      	bne.n	800153e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0cb      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0bf      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800152e:	4b63      	ldr	r3, [pc, #396]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0b7      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153e:	495f      	ldr	r1, [pc, #380]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001540:	4b5e      	ldr	r3, [pc, #376]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 0203 	bic.w	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4313      	orrs	r3, r2
 800154e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001550:	f7ff f998 	bl	8000884 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d112      	bne.n	8001584 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001560:	f7ff f990 	bl	8000884 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e09b      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001576:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d1ee      	bne.n	8001560 <HAL_RCC_ClockConfig+0xfc>
 8001582:	e03e      	b.n	8001602 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d112      	bne.n	80015b2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158e:	f7ff f979 	bl	8000884 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e084      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a4:	4b45      	ldr	r3, [pc, #276]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	d1ee      	bne.n	800158e <HAL_RCC_ClockConfig+0x12a>
 80015b0:	e027      	b.n	8001602 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d11d      	bne.n	80015f6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015bc:	f7ff f962 	bl	8000884 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e06d      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d1ee      	bne.n	80015bc <HAL_RCC_ClockConfig+0x158>
 80015de:	e010      	b.n	8001602 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff f950 	bl	8000884 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e05b      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ee      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0201 	and.w	r2, r3, #1
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d919      	bls.n	8001644 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d105      	bne.n	8001622 <HAL_RCC_ClockConfig+0x1be>
 8001616:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4925      	ldr	r1, [pc, #148]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 0201 	bic.w	r2, r3, #1
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_ClockConfig+0x254>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e034      	b.n	80016ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	491a      	ldr	r1, [pc, #104]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001682:	f000 f823 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 8001686:	4601      	mov	r1, r0
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_RCC_ClockConfig+0x258>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_RCC_ClockConfig+0x25c>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	fa21 f303 	lsr.w	r3, r1, r3
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_RCC_ClockConfig+0x260>)
 800169c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_ClockConfig+0x264>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f822 	bl	80006ec <HAL_InitTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80016ac:	7afb      	ldrb	r3, [r7, #11]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023c00 	.word	0x40023c00
 80016bc:	40023800 	.word	0x40023800
 80016c0:	08001e98 	.word	0x08001e98
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d0:	b091      	sub	sp, #68	; 0x44
 80016d2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80016d4:	4b5e      	ldr	r3, [pc, #376]	; (8001850 <HAL_RCC_GetSysClockFreq+0x184>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d007      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x28>
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0x2e>
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	f040 809d 	bne.w	8001828 <HAL_RCC_GetSysClockFreq+0x15c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016ee:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_GetSysClockFreq+0x188>)
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016f2:	e0a7      	b.n	8001844 <HAL_RCC_GetSysClockFreq+0x178>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f4:	4b58      	ldr	r3, [pc, #352]	; (8001858 <HAL_RCC_GetSysClockFreq+0x18c>)
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016f8:	e0a4      	b.n	8001844 <HAL_RCC_GetSysClockFreq+0x178>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80016fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fc:	0c9b      	lsrs	r3, r3, #18
 80016fe:	f003 020f 	and.w	r2, r3, #15
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <HAL_RCC_GetSysClockFreq+0x190>)
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	0d9b      	lsrs	r3, r3, #22
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	3301      	adds	r3, #1
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001714:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <HAL_RCC_GetSysClockFreq+0x184>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d045      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0xe0>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	460b      	mov	r3, r1
 800172a:	4614      	mov	r4, r2
 800172c:	0160      	lsls	r0, r4, #5
 800172e:	6278      	str	r0, [r7, #36]	; 0x24
 8001730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001732:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001736:	6278      	str	r0, [r7, #36]	; 0x24
 8001738:	015b      	lsls	r3, r3, #5
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001740:	1a5b      	subs	r3, r3, r1
 8001742:	eb64 0402 	sbc.w	r4, r4, r2
 8001746:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800174a:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800174e:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001752:	ebb8 0803 	subs.w	r8, r8, r3
 8001756:	eb69 0904 	sbc.w	r9, r9, r4
 800175a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800176c:	61bb      	str	r3, [r7, #24]
 800176e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001772:	eb18 0801 	adds.w	r8, r8, r1
 8001776:	eb49 0902 	adc.w	r9, r9, r2
 800177a:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001792:	4640      	mov	r0, r8
 8001794:	4649      	mov	r1, r9
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	f04f 0400 	mov.w	r4, #0
 800179c:	461a      	mov	r2, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	f7fe fcec 	bl	800017c <__aeabi_uldivmod>
 80017a4:	4603      	mov	r3, r0
 80017a6:	460c      	mov	r4, r1
 80017a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017aa:	e03a      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x156>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80017ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4614      	mov	r4, r2
 80017b8:	0160      	lsls	r0, r4, #5
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	015b      	lsls	r3, r3, #5
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017cc:	1a5b      	subs	r3, r3, r1
 80017ce:	eb64 0402 	sbc.w	r4, r4, r2
 80017d2:	01a6      	lsls	r6, r4, #6
 80017d4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80017d8:	019d      	lsls	r5, r3, #6
 80017da:	1aed      	subs	r5, r5, r3
 80017dc:	eb66 0604 	sbc.w	r6, r6, r4
 80017e0:	00f3      	lsls	r3, r6, #3
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	00eb      	lsls	r3, r5, #3
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80017f4:	186d      	adds	r5, r5, r1
 80017f6:	eb46 0602 	adc.w	r6, r6, r2
 80017fa:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80017fe:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001802:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001806:	4655      	mov	r5, sl
 8001808:	465e      	mov	r6, fp
 800180a:	4628      	mov	r0, r5
 800180c:	4631      	mov	r1, r6
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	f04f 0400 	mov.w	r4, #0
 8001814:	461a      	mov	r2, r3
 8001816:	4623      	mov	r3, r4
 8001818:	f7fe fcb0 	bl	800017c <__aeabi_uldivmod>
 800181c:	4603      	mov	r3, r0
 800181e:	460c      	mov	r4, r1
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllvco;
 8001822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001826:	e00d      	b.n	8001844 <HAL_RCC_GetSysClockFreq+0x178>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_GetSysClockFreq+0x184>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	0b5b      	lsrs	r3, r3, #13
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001836:	3301      	adds	r3, #1
 8001838:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001842:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001846:	4618      	mov	r0, r3
 8001848:	3744      	adds	r7, #68	; 0x44
 800184a:	46bd      	mov	sp, r7
 800184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	00f42400 	.word	0x00f42400
 8001858:	007a1200 	.word	0x007a1200
 800185c:	08001e8c 	.word	0x08001e8c

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_RCC_GetHCLKFreq+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001878:	f7ff fff2 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 800187c:	4601      	mov	r1, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	0adb      	lsrs	r3, r3, #11
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	08001ea8 	.word	0x08001ea8

0800189c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	220f      	movs	r2, #15
 80018aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_RCC_GetClockConfig+0x58>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_RCC_GetClockConfig+0x58>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_GetClockConfig+0x58>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_RCC_GetClockConfig+0x58>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_GetClockConfig+0x5c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	601a      	str	r2, [r3, #0]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40023c00 	.word	0x40023c00

080018fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d12c      	bne.n	800196e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e016      	b.n	800195a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001936:	6253      	str	r3, [r2, #36]	; 0x24
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800194c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001958:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001960:	d105      	bne.n	800196e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001968:	d101      	bne.n	800196e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800196a:	2301      	movs	r3, #1
 800196c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001974:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	490d      	ldr	r1, [pc, #52]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0201 	bic.w	r2, r3, #1
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0201 	and.w	r2, r3, #1
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e031      	b.n	8001a32 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f829 	bl	8001a3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 f978 	bl	8001cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d001      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e03a      	b.n	8001ada <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	68d2      	ldr	r2, [r2, #12]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a84:	d00e      	beq.n	8001aa4 <HAL_TIM_Base_Start_IT+0x58>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <HAL_TIM_Base_Start_IT+0x98>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d009      	beq.n	8001aa4 <HAL_TIM_Base_Start_IT+0x58>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d004      	beq.n	8001aa4 <HAL_TIM_Base_Start_IT+0x58>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a13      	ldr	r2, [pc, #76]	; (8001aec <HAL_TIM_Base_Start_IT+0xa0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d111      	bne.n	8001ac8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d010      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac6:	e007      	b.n	8001ad8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40000800 	.word	0x40000800
 8001aec:	40010800 	.word	0x40010800

08001af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0202 	mvn.w	r2, #2
 8001b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8c1 	bl	8001cba <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f8b4 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f8c3 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d122      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d11b      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0204 	mvn.w	r2, #4
 8001b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f897 	bl	8001cba <HAL_TIM_IC_CaptureCallback>
 8001b8c:	e005      	b.n	8001b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f88a 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f899 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d122      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d11b      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0208 	mvn.w	r2, #8
 8001bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2204      	movs	r2, #4
 8001bca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f86d 	bl	8001cba <HAL_TIM_IC_CaptureCallback>
 8001be0:	e005      	b.n	8001bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f860 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f86f 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d122      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d11b      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0210 	mvn.w	r2, #16
 8001c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f843 	bl	8001cba <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f836 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f845 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10e      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0201 	mvn.w	r2, #1
 8001c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe fcf6 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7e:	2b40      	cmp	r3, #64	; 0x40
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	d107      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f81f 	bl	8001cde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d00f      	beq.n	8001d28 <TIM_Base_SetConfig+0x38>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <TIM_Base_SetConfig+0xc8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00b      	beq.n	8001d28 <TIM_Base_SetConfig+0x38>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a2a      	ldr	r2, [pc, #168]	; (8001dbc <TIM_Base_SetConfig+0xcc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <TIM_Base_SetConfig+0x38>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <TIM_Base_SetConfig+0xd0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <TIM_Base_SetConfig+0x38>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a28      	ldr	r2, [pc, #160]	; (8001dc4 <TIM_Base_SetConfig+0xd4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d108      	bne.n	8001d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d017      	beq.n	8001d72 <TIM_Base_SetConfig+0x82>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <TIM_Base_SetConfig+0xc8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <TIM_Base_SetConfig+0x82>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <TIM_Base_SetConfig+0xcc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00f      	beq.n	8001d72 <TIM_Base_SetConfig+0x82>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <TIM_Base_SetConfig+0xd0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00b      	beq.n	8001d72 <TIM_Base_SetConfig+0x82>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <TIM_Base_SetConfig+0xd4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <TIM_Base_SetConfig+0x82>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <TIM_Base_SetConfig+0xd8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_Base_SetConfig+0x82>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <TIM_Base_SetConfig+0xdc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d108      	bne.n	8001d84 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	615a      	str	r2, [r3, #20]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	40010c00 	.word	0x40010c00
 8001dcc:	40011000 	.word	0x40011000

08001dd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd0:	480c      	ldr	r0, [pc, #48]	; (8001e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dd2:	490d      	ldr	r1, [pc, #52]	; (8001e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de8:	4c0a      	ldr	r4, [pc, #40]	; (8001e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001df6:	f7fe fd15 	bl	8000824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f000 f80f 	bl	8001e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfe:	f7fe fbb1 	bl	8000564 <main>
  bx lr
 8001e02:	4770      	bx	lr
  ldr r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e0c:	08001ec0 	.word	0x08001ec0
  ldr r2, =_sbss
 8001e10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e14:	2000006c 	.word	0x2000006c

08001e18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC1_IRQHandler>
	...

08001e1c <__libc_init_array>:
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	2500      	movs	r5, #0
 8001e20:	4e0c      	ldr	r6, [pc, #48]	; (8001e54 <__libc_init_array+0x38>)
 8001e22:	4c0d      	ldr	r4, [pc, #52]	; (8001e58 <__libc_init_array+0x3c>)
 8001e24:	1ba4      	subs	r4, r4, r6
 8001e26:	10a4      	asrs	r4, r4, #2
 8001e28:	42a5      	cmp	r5, r4
 8001e2a:	d109      	bne.n	8001e40 <__libc_init_array+0x24>
 8001e2c:	f000 f822 	bl	8001e74 <_init>
 8001e30:	2500      	movs	r5, #0
 8001e32:	4e0a      	ldr	r6, [pc, #40]	; (8001e5c <__libc_init_array+0x40>)
 8001e34:	4c0a      	ldr	r4, [pc, #40]	; (8001e60 <__libc_init_array+0x44>)
 8001e36:	1ba4      	subs	r4, r4, r6
 8001e38:	10a4      	asrs	r4, r4, #2
 8001e3a:	42a5      	cmp	r5, r4
 8001e3c:	d105      	bne.n	8001e4a <__libc_init_array+0x2e>
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
 8001e40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e44:	4798      	blx	r3
 8001e46:	3501      	adds	r5, #1
 8001e48:	e7ee      	b.n	8001e28 <__libc_init_array+0xc>
 8001e4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e4e:	4798      	blx	r3
 8001e50:	3501      	adds	r5, #1
 8001e52:	e7f2      	b.n	8001e3a <__libc_init_array+0x1e>
 8001e54:	08001eb8 	.word	0x08001eb8
 8001e58:	08001eb8 	.word	0x08001eb8
 8001e5c:	08001eb8 	.word	0x08001eb8
 8001e60:	08001ebc 	.word	0x08001ebc

08001e64 <memset>:
 8001e64:	4603      	mov	r3, r0
 8001e66:	4402      	add	r2, r0
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d100      	bne.n	8001e6e <memset+0xa>
 8001e6c:	4770      	bx	lr
 8001e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e72:	e7f9      	b.n	8001e68 <memset+0x4>

08001e74 <_init>:
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	bf00      	nop
 8001e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7a:	bc08      	pop	{r3}
 8001e7c:	469e      	mov	lr, r3
 8001e7e:	4770      	bx	lr

08001e80 <_fini>:
 8001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e82:	bf00      	nop
 8001e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e86:	bc08      	pop	{r3}
 8001e88:	469e      	mov	lr, r3
 8001e8a:	4770      	bx	lr
